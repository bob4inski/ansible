#
# This is a sample configuration. It illustrates how to separate static objects
# traffic from dynamic traffic, and how to dynamically regulate the server load.
#
# It listens on 192.168.1.10:80, and directs all requests for Host 'img' or
# URIs starting with /img or /css to a dedicated group of servers. URIs
# starting with /admin/stats deliver the stats page.
#

global
    maxconn         10000
    stats socket    /var/run/haproxy.stat mode 600 level admin
    log             127.0.0.1:514 local2
    chroot          /var/empty
    pidfile         /var/run/haproxy.pid
    user            haproxy
    group           haproxy
    daemon

# The public 'www' address in the DMZ
frontend public
    bind            *:80 name clear
    #bind           *:443 ssl crt /etc/haproxy/haproxy.pem
    mode            http
    log             global
    option          httplog
    option          dontlognull
    monitor-uri     /monitoruri
    maxconn         8000
    timeout client  10s

    stats uri       /admin/stats
    use_backend     static if { hdr_beg(host) -i img }
    use_backend     static if { path_beg /img /css   }
    default_backend static

# The static backend backend for 'Host: img', /img and /css.
backend static
    mode            http
    balance         roundrobin
    option prefer-last-server
    retries         2
    option redispatch
    timeout connect 2s
    timeout server  3s
    {% for item in groups['webservers'] %}
    server {{ hostvars[item]['inventory_hostname'] }} {{ hostvars[item]['ansible_host'] }}:8080 check inter 1000 
    {% endfor %}